package integ.smartquestion;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Logger;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.lang3.StringUtils;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import appl.data.Asset;
import appl.data.IXAtivoFixo;
import appl.data.IXAtivoFixoAtualiza;
import appl.data.Impld;
import appl.data.Implg;
import appl.data.Invty;
import appl.data.Obimg;
import appl.data.Param;
import wins.libs.DatabaseUtils;
import wins.libs.data.DataObject;

/**
 * Processo de integração entre Sispat e SmartQuestion
 * 
 * @author Wendel Silvério
 */
public class IntegrationJob implements Job { 

	public String appsx = ""; // MRS Qtd de Atendimentos sem Erro no Processamento  
	//public String appsx = ""; // Qtd de Atendimentos sem Erro no Processamento

	
	//	private static Logger log = Logger.getLogger(IntegrationJob.class.getName());

    /* 
	SELECT * FROM MRS_FA_ATDM_SQ_HEADERS a WHERE
	   STAT_ATDM <> 'Pendente'
	   and a.cd_ativo is not null
	   --and a.cd_ativo is not null
	   and REGEXP_LIKE(a.cd_ativo, '[0-9]')  
	   and a.cd_ativo <> '0'   
	   and a.NU_ATDM = '973'
	;

	SELECT CAMPO_FORM, VL_RSPT FROM MRS_FA_ATDM_SQ_RSPT WHERE 
	ID_ATDM='110994' AND VL_RSPT IS NOT NULL
	   and exists (select 1 from MRS_IA_INTF_SIST c where
	   upper(trim(c.intf_sist_extn)) = upper(trim(campo_form)))   
    */
	

	private final String SQL_SQ_HEADERS1 = "SELECT * FROM "+appsx+"MRS_FA_ATDM_SQ_HEADERS a WHERE ";
	//private static final String SQL_SQ_HEADERS1 = "SELECT * FROM MRS_FA_ATDM_SQ_HEADERS a WHERE ";

	private final String SQL_SQ_HEADERS2 = "a.STAT_ATDM = 'Conferido' ";
	//private static final String SQL_SQ_HEADERS2 = "a.STAT_ATDM == 'Conferido' OR a.STAT_ATDM == 'Pendente' ";
	private final String SQL_SQ_HEADERS3 = "and a.cd_ativo is not null ";
	private final String SQL_SQ_HEADERS4 = "and REGEXP_LIKE(a.cd_ativo, '[0-9]') ";
	private final String SQL_SQ_HEADERS5 = "and a.cd_ativo <> '0' ";
	private final String SQL_SQ_HEADERS = SQL_SQ_HEADERS1 + SQL_SQ_HEADERS2 + SQL_SQ_HEADERS3 + SQL_SQ_HEADERS4 + SQL_SQ_HEADERS5; 
	
	private static final String SISPAT_IMAGES_FOLDERNAME="sispat_mrs_images";
	
	private static File sispatImagesRoot;
	private static Integer deltaMinutesParam;
	
	private IntegrationLog iLog = new IntegrationLog();

	public Integer kk_atd_ok_prc = 0; // Qtd de Atendimentos sem Erro no Processamento
	public Integer kk_atd_err_prc = 0; // Qtd de Atendimentos com Erro no Processamento
	public Integer kk_err_atd = 0;  // Qtd de Erros no Atendimento
	public Integer kk_ok_atd = 0;  // Qtd de Oks no Atendimento

	public HashMap<String, Integer> kk_err_atd_map = new HashMap<String, Integer>();
	public HashMap<String, Integer> kk_ok_atd_map = new HashMap<String, Integer>();

    public ArrayList assetList = new ArrayList() ;   // croosBrowser wdpsList Array List

	public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
		try {
			sync();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void sync() throws SQLException {
		iLog.mode(IntegrationMode.Automatic);
		Connection oracleConnection = DatabaseUtils.getOracleConnection();
		PreparedStatement pstmt = oracleConnection.prepareStatement(SQL_SQ_HEADERS + " and CREATION_DATE >= SYSDATE-INTERVAL '" + deltaMinutesParam.toString() + "' MINUTE order by to_number(a.nu_atdm) asc " );
		loadCovers(null, null, pstmt);
	}

	public void sync(Date iniDate) throws IntegrationJobException, SQLException {
		iLog.mode(IntegrationMode.ManualDate);
		Connection oracleConnection = DatabaseUtils.getOracleConnection();
		PreparedStatement pstmt = oracleConnection.prepareStatement(SQL_SQ_HEADERS + " and CREATION_DATE >= (TO_DATE(?, 'dd/mm/yyyy hh24:mi:ss') - INTERVAL '" + deltaMinutesParam.toString() + "' MINUTE) order by to_number(a.nu_atdm) asc  ");
		//PreparedStatement pstmt = DatabaseUtils.getOracleConnection().prepareStatement(SQL_SQ_HEADERS + " and CREATION_DATE >= (TO_DATE(?, 'dd/mm/yyyy hh24:mi:ss') - INTERVAL '" + deltaMinutesParam.toString() + "' MINUTE) ");
		pstmt.setString(1, new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(iniDate));
		loadCovers(null, null, pstmt);
	}

	public void sync(Date iniDate, Date endDate) throws IntegrationJobException, SQLException {
		iLog.mode(IntegrationMode.ManualDate);
		Connection oracleConnection = DatabaseUtils.getOracleConnection();
		//PreparedStatement pstmt = DatabaseUtils.getOracleConnection().prepareStatement(SQL_SQ_HEADERS + " and CREATION_DATE >= TO_DATE(?, 'dd/mm/yyyy hh24:mi:ss') and CREATION_DATE <= TO_DATE(?, 'dd/mm/yyyy hh24:mi:ss') order by to_number(a.nu_atdm) asc ");
		PreparedStatement pstmt = oracleConnection.prepareStatement(SQL_SQ_HEADERS + " and CREATION_DATE >= TO_DATE(?, 'dd/mm/yyyy hh24:mi:ss') and CREATION_DATE <= TO_DATE(?, 'dd/mm/yyyy hh24:mi:ss') order by to_number(a.nu_atdm) asc ");
		pstmt.setString(1, new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(iniDate.getTime()));
		pstmt.setString(2, new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(endDate.getTime()));
		//oracleConnection.close();
		DatabaseUtils.releaseOracleConnection(oracleConnection);
		loadCovers(iniDate, endDate, pstmt);
	}

	public void sync(Integer nuAtdm) throws SQLException, IOException, ParseException, IntegrationJobException {
		iLog.mode(IntegrationMode.ManualAtdm);
		Connection oracleConnection = DatabaseUtils.getOracleConnection();
		PreparedStatement pstmt = oracleConnection.prepareStatement(SQL_SQ_HEADERS + " and a.NU_ATDM = ?");
		pstmt.setInt(1, nuAtdm);
		loadCovers(null, null, pstmt);
	}
	
	/**
	 * Carregamento dos dados da Capa (Oracle)
	 *  
	 * @return 
	 * @throws SQLException 
	 * @throws IOException 
	 * @throws IntegrationJobException 
	 */
    private void loadCovers(Date DateIni, Date DateEnd, PreparedStatement preparedStatement) throws SQLException {
		
		iLog.begin("SmartQuestion");
        Integer kkk = 0; 
        kk_atd_ok_prc = 0; // Qtd de Atendimentos sem Erro no Processmento  
        kk_atd_err_prc = 0; // Qtd de Atendimentos com Erro no Processmento  

        String campottvar = "";	 String campottfixo = ""; String valorx = "";	
		boolean isEmpty = true; String asset_nu = "";

		String asset_id = "";
		String asset_tp_cfasttp = "";

		String asset_cd_cfinvty_new = "";
		String asset_cd_cfinvty_ultm = "";
		String asset_nu_atdm_new = ""; 
		String asset_nu_atdm_ultm = ""; 
		
		String letranova = "";

		ResultSet rs = preparedStatement.executeQuery();
		//Connection concover =  DatabaseUtils.getConnection();
		Connection oracleConnectionX = DatabaseUtils.getOracleConnection();
		Connection oracleConnectionH = DatabaseUtils.getOracleConnection();

		// Carrega ************** Capas na AssetSmqt 
		int kka = 1;
		List<String> assetIdList = new ArrayList<String>();
		List<Asset> assetList = new ArrayList<Asset>();
		List<String> assetIdAtdmList = new ArrayList<String>();
		HashMap<String, Asset> assetMap = new HashMap<String, Asset>(); //zz
		HashMap<String, Asset> assetNewMap = new HashMap<String, Asset>(); //zz

		//Asset assetSmqt = new Asset("");

		while (rs.next()) {
			Asset assetSmqt = new Asset("");

            // iLog.setErrorLines(false);
			isEmpty = false;
			//Asset assetSmqt = null; // = null;
			String atvfx_cd_invty_ultm = "";
			// Ler Capas - Para Revisão de Bira /

				// Carrega Identificadores de Atendimento
				String id_atdm = rs.getString("ID_ATDM");
				//Asset assetSmqt = new Asset(id_atdm);
				assetSmqt.setAsset_id_atdm(id_atdm);

				String asset_nu_atdmx = rs.getString("NU_ATDM"); // novo

				
				//Connection oracleConnectionE = DatabaseUtils.getOracleConnection();
	            // Arualiza Tabela de Header com status de lido
	            try {
	            	String sqlup_ora = "update    "+appsx+"MRS_FA_ATDM_SQ_HEADERS set LAST_UPDATE_DATE=SYSDATE, SIST_DEST_LIDO = ?  where NU_ATDM = ?";
	            	PreparedStatement ps_header = oracleConnectionX.prepareStatement(sqlup_ora);
	                String status = "S";
	            		ps_header.setString(1, status);
	                    ps_header.setString(2, asset_nu_atdmx);
	            		ps_header.executeUpdate();
	            		//kkkLidos = kkkLidos + 1;
	            		//System.out.println("XXX>>>>> Qtd de Atualizaçoes do Header: "+kkkLidos.toString());
	            		ps_header.close();
	            } catch (Exception e) {
	                String message = e.getMessage();
	            	//iLog.logAtdmError(e.getMessage(), asset_nu, asset.getAsset_nu_atdm());
	            } finally {
	            }
				
				String zeros = "0000";
                String zerosfill = "";
                int ll = asset_nu_atdmx.length();
				if (ll < 4) {
					zerosfill = zeros.substring(0,4 - ll);     
					asset_nu_atdmx = zerosfill + asset_nu_atdmx;  
				}
				//assetSmqt.setAsset_nu_atdm(rs.getString("NU_ATDM"));
				assetSmqt.setAsset_nu_atdm(asset_nu_atdmx);

				asset_nu = rs.getString("CD_ATIVO");
				assetSmqt.setAsset_nu(asset_nu);

		//		iLog.openAtdm(assetSmqt.getAsset_nu_atdm(), assetSmqt.getAsset_nu());

				// Tratamento de Parcela de Bem
				assetSmqt.setAsset_cd_hierarquico("000");

				kkk = kkk + 1;
				System.out.println("XXX>>>>> asset_id_atdm: "+assetSmqt.getAsset_id_atdm()+" kkk: "+kkk.toString());
				
				String creation_date = rs.getString("CREATION_DATE"); // novo
				assetSmqt.setAsset_ds_creation_date(creation_date);

				if ( asset_nu.equals("3200422") ) {
					String aaaa = "";
				}
                // Cria Nova Vistoria com base na Data de Inicio da  Vistoria
                //asset_cd_cfinvty_new = new SimpleDateFormat("yy").format(assetSmqt.getAsset_di_atdm_str()) + "-1";
                asset_cd_cfinvty_new = new SimpleDateFormat("yy").format(rs.getDate("DT_INIC")) + "-1";
				assetSmqt.setAsset_cd_cfinvty(asset_cd_cfinvty_new);

                // Carrega detalhes da Nova Vistoria do Bem                   				
				assetSmqt.setAsset_cd_perito(rs.getString("MATL_USUA"));
				assetSmqt.setAsset_cd_auxiliar("");
				assetSmqt.setAsset_dt_vistoria(rs.getTimestamp("DT_INIC"));
				assetSmqt.setAsset_nu_doc_inspecao("");

                Date asset_di_atdm = rs.getTimestamp("DT_INIC");             // novo     
				assetSmqt.setAsset_di_atdm(asset_di_atdm);
                Date asset_df_atdm = rs.getTimestamp("DT_FIM");              // novo    
				assetSmqt.setAsset_df_atdm(asset_df_atdm);

                String asset_cd_ponto_atdm = rs.getString("PONTO_ATDM");     // novo  
				assetSmqt.setAsset_cd_ponto_atdm(asset_cd_ponto_atdm);
	            String asset_cd_stat_atdm = rs.getString("STAT_ATDM");       // novo  
				assetSmqt.setAsset_cd_stat_atdm(asset_cd_stat_atdm);           
	            String asset_cd_tipo_vsta = rs.getString("TIPO_VSTA");       // novo  
				assetSmqt.setAsset_cd_tipo_vsta(asset_cd_tipo_vsta);
	            String asset_cd_sist_orig = rs.getString("SIST_ORIG");       // novo  
				assetSmqt.setAsset_cd_sist_orig(asset_cd_sist_orig);
				 
				// Carrega Lat Lon
				String asset_vl_ltde = rs.getString("LTDE");                   
                if (asset_vl_ltde == null) { asset_vl_ltde = "0";}
				assetSmqt.setAsset_vl_ltde(asset_vl_ltde);
	            String asset_vl_lgtd = rs.getString("LGTD");                   
                if (asset_vl_lgtd == null) { asset_vl_lgtd = "0";}
	            assetSmqt.setAsset_vl_lgtd(asset_vl_lgtd);

	            assetIdList.add(id_atdm);     
	            //assetList.add(assetSmqt);  ///*******************
				assetMap.put(id_atdm, assetSmqt);
				assetSmqt = null;
			    //assetSmqt = assetMap.get("5956");

				//String zzz1 = ""; String zzz2 = ""; String zzz3 = "";    
	    		//zzz1 = assetSmqt.getAsset_nu();
	    		//zzz2 = assetSmqt.getAsset_nu_atdm();
	    		//zzz3 = assetSmqt.getAsset_id_atdm();  
	    		// assetSmqt.getsetAsset_cd_perito();

		}
		//Asset assetSmqt = new Asset("");
		//assetSmqt = null;
		//assetSmqt = assetMap.get("5956");

		Map<String, String> ttvarfixo = loadTitles(); 
		Map<String, String> codfSqDePara = loadCodf();

		// ************** Carrega Linhas no assetSmqt e Valida Codfs
		String id_atdmc = ""; kkk = 0;  int kkkx = 0;
       	String id_atdmx = "";
    	String id_atdmx_anterior = "";
        int kkn = 0;
    	ListIterator assetIdList_itr = assetIdList.listIterator();
    	//assetSmqt = null;
    	assetList.clear();

    	//DatabaseUtils.releaseOracleConnection(oracleConnection);
		Connection oracleConnectionz = DatabaseUtils.getOracleConnection();
    	while (assetIdList_itr.hasNext()  ) {
        	id_atdmc = ((String) (assetIdList_itr.next()));
        	kkk = kkk + 1; // kkkx = kkkx + 1;
			//System.out.println("XXX>>>>> Carrega Linhas - asset_id_atdm: "+assetSmqt.getAsset_id_atdm()+" kkk: "+kkk.toString());
        	String valor = "";
        	// Processa todas Linhas da Capa		

        	//DatabaseUtils.releaseConnection(oracleConnection);
    		//Connection oracleConnectionz = DatabaseUtils.getOracleConnection();

        	String sql1 = "SELECT ID_ATDM, CAMPO_FORM, VL_RSPT FROM "+appsx+"MRS_FA_ATDM_SQ_RSPT WHERE VL_RSPT IS NOT NULL AND ID_ATDM = ?";
        	String sql2 = " and exists (select 1 FROM "+appsx+"MRS_IA_INTF_SIST c where";
        	String sql3 = " upper(trim(c.intf_sist_extn)) = upper(trim(campo_form))) order by to_number(id_atdm) asc   ";
        	String sql  = sql1 + sql2 + sql3; 

        	PreparedStatement pstmt2 = oracleConnectionz.prepareStatement(sql);
    		pstmt2.setString(1, id_atdmc); 
        	ResultSet rsl = pstmt2.executeQuery();
            int kl = 0;  int sz  = rsl.getFetchSize(); 
            //String zzz1 = ""; String zzz2 = "";   String zzz3 = ""; 
    		Asset assetSmqt = new Asset("");
    		assetSmqt = null;
    		//assetSmqt = assetMap.get("5956");
            assetSmqt = assetMap.get(id_atdmc) ;
			//System.out.println("XXX>>>>> Carrega Linhas - asset_id_atdm: "+assetSmqt.getAsset_id_atdm()+" kkk: "+kkk.toString());
			System.out.println("XXX>>>>> Carrega Linhas - asset_nu: "+assetSmqt.getAsset_nu()+" kkk: "+kkk.toString());

			//iLog.openAtdm(asset_nu_atdm_new, asset_nu);
			iLog.openAtdm(assetSmqt.getAsset_nu_atdm(), assetSmqt.getAsset_nu());
			kk_err_atd = 0; 
			while (rsl.next()) {
                kl = kl + 1; 
        		id_atdmx = rsl.getString("ID_ATDM");  // Titulo Variavel
    			//System.out.println("XXX>>>>> asset_id_atdm: "+id_atdmc+" kkn: "+kkk.toString());
                /* 
        		if (!id_atdmx.equals(id_atdmx_anterior)) {
        		//if (!id_atdmx.equals(id_atdmx_anteror) || kl == sz ) {
                    if (kkn > 0) { 
                    	assetList.add(assetSmqt);
                    	//if (kkkx == 50 ) {
                		//	System.out.println("XXX>>>>> asset_id_atdm: "+id_atdmc+" kkn -------- : "+kkk.toString());
                    	//	assetList.clear(); kkn = 0; kkkx = 0;
                        //}
                    }
        			assetSmqt = assetMap.get(id_atdmx) ;
        		}	
                */

        		//kkn = kkn +1;
        		//id_atdmx_anterior = id_atdmx; 
        		
        		// Conversão e Carrgamento de Titulo Padrão
        		campottvar = rsl.getString("CAMPO_FORM");  // Titulo Variavel
        		campottfixo = ttvarfixo.get(campottvar);
        		
        		try {
					valor = clobToString(rsl.getClob("VL_RSPT")).trim();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} // Titulo Fixo, usado para De/Para Ref Campo de Asset
		
        		try {
        			//if(campottfixo == null || campottfixo.isEmpty()) {
					//kk_err_atd = kk_err_atd + 1; 
					//throw new LineValidationException("Não encontrado na Tabela de Tradução de Titulos"); //  MRS_IA_INTF_SIST
				    //}
			
				// Para Revisão de Bira / Sidney--------------------------------------------------------------------------------------------------------------------------------
                if (campottfixo.equals("Parcela")) { // (Notificar GGRI)  Campo Novo !
                    assetSmqt.setAsset_cd_hierarquico(valor);  
                } else    
       			if (campottfixo.equals("ACAO")) { // (Notificar GGRI)  Campo Novo !
					int ll = valor.length();
					if ( ll > 490) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor de Ação: '"+valor.substring(0,15)+"...' maior que 490 ");
					} else {
						assetSmqt.setAsset_tp_acao(valor);  
					}
       			} else    
				if (campottfixo.equals("AREA_RESPONSAVEL")) { //(Gerência Geral de Relações Institucionais) Campo Novo 
					assetSmqt.setAsset_cd_area_resp(valor);  
				} else 
				if (campottfixo.equals("CENTRO_CUSTO")) {
					assetSmqt.setAsset_cd_ccusto(valor);
				} else 
				if (campottfixo.equals("COBERTURA")) {// ?? (Demolido) cf=COBTR LA-laje, TC-telha cermica, TF-telha de fibro cimento, TV-telha de vidro, TM-telha metálica, SC-sem cobertura, OU-outros, TA-telhado de argila, TT-telhado de amianto
					//assetSmqt.setAsset_tp_cobertura(codfSqDePara.get("COBTR-" + valor));
					String  xxx = codfSqDePara.get("COBTR-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'COBTR' ");
					} else {
						assetSmqt.setAsset_tp_cobertura(xxx); 
					}
				} else 
				if (campottfixo.equals("ENERGIA_ELETRICA")) { // OK  (Não) cf=GENYN  S-Sim, N-Não
					//asset.setAsset_in_luz_cfgenyn(codfSqDePara.get("SNNID-" + valor));
					String  xxx = codfSqDePara.get("SNNID-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'SNNID' ");
					} else {
						assetSmqt.setAsset_in_luz_cfgenyn(xxx); 
					}
				} else 
				if (campottfixo.equals("TELEFONIA")) {// OK  (Não) cf=GENYN S-Sim, N-Não
					//assetSmqt.setAsset_in_telefonia(codfSqDePara.get("SNNID-" + valor));
					String  xxx = codfSqDePara.get("SNNID-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'SNNID' ");
					} else {
						assetSmqt.setAsset_in_telefonia(xxx); 
					}
				} else 
				if (campottfixo.equals("AGUA")) { // OK (Não) cf=GENYN S-Sim, N-Não
					//assetSmqt.setAsset_in_agua_cfgenyn(codfSqDePara.get("SNNID-" + valor));
					String  xxx = codfSqDePara.get("SNNID-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'SNNID' ");
					} else {
						assetSmqt.setAsset_in_agua_cfgenyn(xxx); 
					}
				} else
				if (campottfixo.equals("ESTRUTURA")) { // ?? (Demolido) cf=TIPES  AL-Alvenaria, CO-Concreto, MA-Madeira, ME-Metálica, MI-Mista, OU-Outros
					//assetSmqt.setAsset_tp_estrutura(codfSqDePara.get("TIPES-" + valor));
					String  xxx = codfSqDePara.get("TIPES-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'TIPES' ");
					} else {
						assetSmqt.setAsset_tp_estrutura(xxx); 
					}
				} else
				if (campottfixo.equals("LOCALIZACAO_ZONAL")) { // ?? (Urbana) cf=LOCZO UR-Urbano, RU-Rural
					//asset.setAsset_cd_zona_cflczon(codfSqDePara.get("LOCZO-" + valor));
					String  xxx = codfSqDePara.get("LOCZO-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'LOCZO' ");
					} else {
						assetSmqt.setAsset_cd_zona_cflczon(xxx); 
					}
				} else
				if (campottfixo.equals("NBP")) {  // Carregando este dado a partir da Capa
				    // assetSmqt.setAsset_nu(valor); 
				} else  
				if (campottfixo.equals("NBP_ESTAMPADO")) { // ?? (false) confirmar ?????  
					//assetSmqt.setAsset_in_bp_estampado(valor); 
					if (valor.contains("true")) {valor = "S";} else {valor = "N";} 
					assetSmqt.setAsset_in_placa_nbp(valor); 
				} else
				if (campottfixo.equals("NOME_PATIO")) {// ?? (Sarzedo)   
					assetSmqt.setAsset_nm_patio_ferroviario(valor);
				} else 
				if (campottfixo.equals("OBSERVACAO")) { //  (Sanitário ficava no mesmo terreno...)
					assetSmqt.setAsset_ob(valor);
				} else        
				if (campottfixo.equals("OBSERVACAO_PATIO")) {// (teste)  Campo Novo no SispatGeo 
					assetSmqt.setAsset_ob_patio(valor); // Observação do Patio  Observação de Patio  
				} else
				if (campottfixo.equals("PAREDES")) {// ?? (Demolido) cf=RVIPD  TA-Tijolo aparente. EM-Emboço, RE-Reboço, PI-Pintura, CE-Cerâmica, MA-Madeira, MM-Mármore, GR-Granito, NA-Não se aplica 
					//assetSmqt.setAsset_tp_revest_int_parede(codfSqDePara.get("RVIPD-" + valor));
					String  xxx = codfSqDePara.get("RVIPD-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'RVIPD' ");
					} else {
						assetSmqt.setAsset_tp_revest_int_parede(xxx); 
					}
				} else 
				if (campottfixo.equals("PISO")) {// ?? (Demolido) cf=RVIPS  CI-cimento, CE-cermica, MM-mrmore, GR-granito, MA-madeira, BO-borracha, OU-outros
					//assetSmqt.setAsset_tp_revest_int_piso(codfSqDePara.get("RVIPS-" + valor));
					String  xxx = codfSqDePara.get("RVIPS-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'RVIPS' ");
					} else {
						assetSmqt.setAsset_tp_revest_int_piso(xxx); 
					}
				} else 
				if (campottfixo.equals("PORTAS")) {// ?? (Demolido) cf=GENST  BE-Bom estado, DF-Danificado, IN-Inexistente, NA-Não se aplica, NI-Não informado 
					//assetSmqt.setAsset_tp_porta(codfSqDePara.get("PORTA-" + valor));
					String  xxx = codfSqDePara.get("PORTA-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'PORTA' ");
					} else {
						assetSmqt.setAsset_tp_porta(xxx); 
					}
				} else 
				if (campottfixo.equals("JANELAS")) { // ?? (Demolido) cf=GENST  BE-Bom estado, DF-Danificado, IN-Inexistente, NA-Não se aplica, NI-Não informado
					//assetSmqt.setAsset_tp_janela(codfSqDePara.get("JANEL-" + valor));
					String  xxx = codfSqDePara.get("JANEL-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'JANEL' ");
					} else {
						assetSmqt.setAsset_tp_janela(xxx); 
					}
				} else 
					//if (campottfixo.equals("POSICAO_QUILOMETRICA")) {  // ?? (601+273)
				if (campottfixo.equals("POSICAO_QUILOMETRICA")) {  // ?? (601+273)
					valor = valor.replace("+", ",");  
					valor = valor.replace(".", ",");  
					valor = valor.replace(" ", "");  

					// Valores de teste
					//valor = "0";
					//valor = "3-1";
					//valor = "300";
					//valor = "300,";
					//valor = "300,0";  // ok
					//valor = "0,0";  // ok

					//if(Pattern.matches("\\d+\\+\\d+|\\d+", valor)) {
					if( Pattern.matches("[0-9]{1,5}[,]{1,1}[0-9]{1,3}", valor)) {
						assetSmqt.setAsset_km_ini(convertDecimal(valor));
 					} else {
    					//throw new LineValidationException("Valor Incompativel!");
 						BigDecimal cc = new BigDecimal("-1");  
    					assetSmqt.setAsset_km_ini(cc);  
    					kk_err_atd = kk_err_atd + 1; 
    					throw new LineValidationException("ER - Valor de Posição Quilométrica Incompativel: "+valor );
 					}

				} else     
				if (campottfixo.equals("SITUACAO")) {// ?? (Demolido)     
					//assetSmqt.setAsset_st_cfsitbm(codfSqDePara.get("SQSIT-" + valor));
					String  xxx = codfSqDePara.get("SQSIT-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'SQSIT' ");
					} else {
						assetSmqt.setAsset_st_cfsitbm(xxx); 
					}
				} else 
				if (campottfixo.equals("TIPO")) {// Se colocar "XTIPO" processament acelera e da erro de conexão     
					//assetSmqt.setAsset_tp_cfasttp?????(codfSqDePara.get("ASTTP???-" + valor));
					String asset_tp_smartq = valor;;
					assetSmqt.setAsset_tp_smartq(asset_tp_smartq);
					String categ_cd_detsubgrupo = valor;
					asset_tp_cfasttp = null;
				} else 
				if (campottfixo.equals("TIPO_PROPRIEDADE")) {// ?? (Arrendado) cf=TPPRP  PP-Próprio, AR-Arrendado, BA-BenfArrendado, LS-Leasing, FS-FISI, RF-BemNOPRFFSA, IT-Intangível, OI-Outros Investimentos, DV-AtivoDispVenda, BT-BenfBemTerceiros
					//assetSmqt.setAsset_tp_propriedade(codfSqDePara.get("TPPRP-"+valor));
					String  xxx = codfSqDePara.get("TPPRP-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'TPPRP' ");
					} else {
						assetSmqt.setAsset_tp_propriedade(xxx); 
					}
				} else
				if (campottfixo.equals("TRECHO_FERROVIARIO")) {// ?? (Ramal do Paraopeba) cf=TRCHO"  FDA-FERROVIA DO AÇO, RDM-RAMAL DE MANGARATIBA, VBM-VARIANTE BRISAMAR, TLN-TERCEIRA LINHA, LDC-LINHA DO CENTRO, SPL-LINHA SÃO PAULO
					//assetSmqt.setAsset_cd_trecho(codfSqDePara.get("TRCHO-"+valor));    // Verificar com Bira
					String  xxx = codfSqDePara.get("TRCHO-" + valor);
					if ( xxx == null) {
						kk_err_atd = kk_err_atd + 1; 
						throw new LineValidationException("ER - Valor: '"+valor+"' não encontrado na tabela de conversão da Codf 'TRCHO' ");
					} else {
						assetSmqt.setAsset_cd_trecho(xxx); 
					}
				} else
				if (campottfixo.equals("DESCRICAO_ATIVO")) {
					assetSmqt.setAsset_ds(valor);
				} else
				if (campottfixo.contains("FOTOGRAFIA")) { // Convert and load Image to /sispat_mrs_images
					//asset_cd_cfinvty_new.String images = assetSmqt.getAsset_ds_images();
                    //images = images + ","+valor;
					//assetSmqt.setAsset_ds_images(images);
				} else
				if (campottfixo.equals("VISTORIA")) { // Deprecado pelo tratamento feito readCovers
	                asset_cd_cfinvty_new = valor;
					assetSmqt.setAsset_cd_cfinvty(valor);
					assetSmqt.setAsset_id(assetSmqt.getAsset_nu() + "-000-" + assetSmqt.getAsset_cd_cfinvty());
				} else 
					break;
             		} catch (LineValidationException e) {

    				// Arualiza Tabela de Header com status de lido
    	            try {
    	            	String sqlup_ora = "update    "+appsx+"MRS_FA_ATDM_SQ_HEADERS set LAST_UPDATE_DATE=SYSDATE, SIST_DEST_LIDO = ?  where NU_ATDM = ?";
    	            	PreparedStatement ps_header = oracleConnectionH.prepareStatement(sqlup_ora);
    	                String status = "E";
    	            		ps_header.setString(1, status);
    	            		Integer atd = Integer.parseInt(assetSmqt.getAsset_nu_atdm()); 
                            String atdx = atd.toString();
                            ps_header.setString(2, atdx);
    	            		ps_header.executeUpdate();
    	            		ps_header.close();
    	            		DatabaseUtils.releaseOracleConnection(oracleConnectionH);
    	            		//System.out.println("XXX>>>>> Qtd de Atualizaçoes do Header: "+kkkLidos.toString());
    	            } catch (Exception ex) {
    	                //String message = e.getMessage();
    	            	iLog.logAtdmError(ex.getMessage(), null, null);
    	            } finally {
    	            }
        			
        			iLog.logAtdmError(e.getMessage(), assetSmqt.getAsset_nu(), assetSmqt.getAsset_nu_atdm());
        			continue;
        		}
        	} // While  rs
            String zzz1 = ""; String zzz2 = ""; String zzz3 = "";    
    		zzz1 = assetSmqt.getAsset_nu();
    		zzz2 = assetSmqt.getAsset_nu_atdm();
    		zzz3 = assetSmqt.getAsset_id_atdm();
    		// assetSmqt.getsetAsset_cd_perito();
            if ( zzz2.equals("1509") ) {
            	String debugfff = "";
            }
            if ( zzz2.equals("1513") ) {
            	String debugfffaa = "";
            }
    		
    		kk_err_atd_map.put(id_atdmc, kk_err_atd);  
    		kk_ok_atd_map.put(id_atdmc, kk_ok_atd);  

    		if (kk_err_atd == 0) {
    			assetList.add(assetSmqt);
    		}
 
    		rsl.close();
        	pstmt2.close();
           	DatabaseUtils.releaseOracleConnection(oracleConnectionz); // N]ap Funciona da Excede max cursores
    	} // While assetList 

    	 
    	//oracleConnection.close();   //zzzzzzzzzzzzz
    	//DatabaseUtils.releaseOracleConnection(oracleConnection);

    	//oracleConnectionz.close();
    	DatabaseUtils.releaseOracleConnection(oracleConnectionz);
    	
        // Carrega ************** Assets para Atualização
        String atvfx_cd_invty_ultm = "";
        Asset asset = new Asset("");
		//Connection concover =  DatabaseUtils.getConnection();
        kkk = 0; assetIdList.clear();   Integer kkkLidos = 0;
    	ListIterator assetList_itr = assetList.listIterator();
        while (assetList_itr.hasNext()  ) {
    		Connection concover =  DatabaseUtils.getConnection();
    		Asset assetSmqt = new Asset("");
    		assetSmqt = ((Asset) (assetList_itr.next()));
			kkk = kkk + 1; 
			//System.out.println("XXX>>>>> Carrega e Atualiza Assets - asset_id_atdm: "+assetSmqt.getAsset_id_atdm()+" kkk: "+kkk.toString());
			asset_nu = assetSmqt.getAsset_nu(); 
            id_atdmx = assetSmqt.getAsset_id_atdm();
        	asset_nu_atdm_new = assetSmqt.getAsset_nu_atdm();
        	
            kk_err_atd = kk_err_atd_map.get(id_atdmx);  
            kk_ok_atd =  kk_ok_atd_map.get(id_atdmx);  

            System.out.println("XXX>>>>> Carrega e Atualiza Assets - asset_nu: "+asset_nu+" kkk: "+kkk.toString());
            
        	try {
				//asset_nu = assetSmqt.getAsset_nu(); 
                ///* 
                if (kkk == 428) {  
                	String debughc = "";
                }
        		if (asset_nu.equals("3000518")) {
                	String debugh = "";
                }
        		//if( !new IXAtivoFixo(asset_nu).load(concover)) {
        		//IXAtivoFixo atvfx new IXAtivoFixo(asset_nu).load(concover);
        		//IXAtivoFixo atvfx new IXAtivoFixo(asset_nu);
        		//IXAtivoFixo atvfx new IXAtivoFixo(asset_nu);
        		//IXAtivoFixo atvfx new IXAtivoFixo(asset_nu).load(concover); 
 
                // Obtendo Tipo do Ativo Fixo
        		IXAtivoFixoAtualiza atvfx = new IXAtivoFixoAtualiza(asset_nu);    

        		String atvfx_tp_cfasttp = "AC";
        		// if( !new IXAtivoFixo(asset_nu).load(concover)) {
        		if( atvfx == null ) {
					//iLog.logAtdmError("Bp '" + asset_nu + "' não encontrado no Ativo Fixo!", asset_nu);
					//continue;
					kk_err_atd = kk_err_atd + 1; 
					int kkkkx = kkk;
					//if ( kk_err_atd == 0) {kk_atd_ok_prc = kk_atd_ok_prc + 1;} 
					if ( kk_err_atd > 0) {kk_atd_err_prc = kk_atd_err_prc + 1;} 
					throw new NbpNotFoundException("ER - Bp '" + asset_nu + "' não encontrado no Ativo Fixo!");
				} else {
					// Carrega Tipo do ATVFX   **********************************************************************
           		    atvfx_tp_cfasttp = atvfx.getAtvfx_tp_cfasttp();
				}
        		
        		//  Carrega e Ultima Vistoria do Sispat, incluino o seu tipo (asset_cfasttp)
				asset = loadLastSurvey(asset_nu, assetSmqt.getAsset_cd_hierarquico());   // Carrega todos os dados da ultima vistoria do Bem
            	asset_nu_atdm_ultm = asset.getAsset_nu_atdm();
                if (asset_nu_atdm_ultm == null) {
            		asset_nu_atdm_ultm = "0";
            		asset.setAsset_nu_atdm("0");
            	}                     

                asset_id = asset.getAsset_id(); 

                if ( asset_id != null )  {
                	// Carrega Tipo da Ultima Vistoria, se não .....  
                	asset_tp_cfasttp = asset.getAsset_tp_cfasttp();  // Ovtem tipo da Tabela Asset 

                	// Corrige asset_tp_cfasttp  do Asset se for 'AC' ou invalido, com atvfx_tp_cfasttp  
                	// Se Tipo da Ultima Vistoria == "AC" ou "" ou Null, pega Tipo do Ativo Fixo 
                	if ( asset_tp_cfasttp != null &&  asset_tp_cfasttp.contains("AC") ) {
                	    asset.setAsset_tp_cfasttp(atvfx_tp_cfasttp);  // se tipo == "AC" tenta peja-lo do ATVFX
                    } else
                    if ( asset_tp_cfasttp != null &&  asset_tp_cfasttp.length() == 0 ) {
                        asset.setAsset_tp_cfasttp(atvfx_tp_cfasttp);  // se tipo == "" tenta peja-lo do ATVFX
                	} else
                	if ( asset_tp_cfasttp == null  ) {
                	    asset.setAsset_tp_cfasttp(atvfx_tp_cfasttp); // se tipo == null tenta peja-lo do ATVFX
                    }
                
                	// Carreha Ultimo Atendimento   asset.getAsset_nu_atdm
                	//asset_nu_atdm_ultm = asset.getAsset_nu_atdm();

                	// Carregando Vistoria de Bem -------------------
                	// Carrega Vistoria de Bem a partir de asset_id da Ultima Vistoria
    				if ( asset_nu.equals("3200422") ) {
    					String aaaa = "";
    				}
                	int starty = asset_id.lastIndexOf("-") - 2;   
                	int endy = asset_id.length();                
                	asset_cd_cfinvty_ultm = asset_id.substring(starty, endy); 
                	asset_cd_cfinvty_new = assetSmqt.getAsset_cd_cfinvty(); 
                	
                	letranova =  ""; 
                	if (asset_cd_cfinvty_ultm != null) { 
                		int start = asset_cd_cfinvty_ultm.length() - 1;
                		int end = asset_cd_cfinvty_ultm.length();
                		String asset_cd_cfinvty_letra = asset_cd_cfinvty_ultm.substring(start, end); 
                		String letras = "abcdefghijklmnopqrstuvxz0";
                		int letran = letras.indexOf(asset_cd_cfinvty_letra); 
                		if (letran < 0) { letran = 0;}
                		//letranova =  letras.substring(letran+1, letran+2); 
                		letranova =  letras.substring(letran, letran+1); 
                	}
                } else {
                    // Carrega Yipo do Ativo Fixo se nenhuma Vistoria existe para o Bem 
           		    //atvfx_tp_cfasttp = atvfx.getAtvfx_tp_cfasttp();
                    asset_tp_cfasttp = atvfx.getAtvfx_tp_cfasttp();
                }

        		// Cria Nova Vistoria se já não existir
				if ( assetSmqt.getAsset_nu().equals("3200422") ) {
					String aaaa = "";
				}
                asset.setAsset_di_atdm(assetSmqt.getAsset_di_atdm());
                asset.setAsset_df_atdm(assetSmqt.getAsset_df_atdm());

				Invty invty = new Invty(asset_cd_cfinvty_new);
				invty.load(concover);   
                String invtx = invty.getInvty_nm(); 
                if ( invtx == null ) {   // Crua Nova Vistoria
                	invty.setInvty_cd(asset_cd_cfinvty_new)  ;
                	invty.setInvty_tp("VA");
                	invty.setInvty_nm(asset_cd_cfinvty_new + "Criada pela Importação do SmartQuestion");
                	invty.setInvty_dt(rs.getDate("DT_INIC"))    ;
                	invty.setInvty_tp_vg("X");
                	invty.setInvty_tp_lc("X");
                	invty.setInvty_tp_lr("X");
                	invty.setInvty_tp_dp("X");
                	invty.setInvty_tp_dc("X");
                	invty.setInvty_tp_pn("X");
                	invty.setInvty_tp_ps("X");
                	invty.setInvty_tp_pi("X");
                	invty.setInvty_tp_pt("X");
                	invty.setInvty_tp_tu("X");
                	invty.setInvty_tp_vd("X");
                	invty.setInvty_tp_bu("X");
                	invty.setInvty_tp_ed("X");
                	invty.setInvty_tp_tp("X");
                	invty.setInvty_tp_tl("X");
                	invty.save(DatabaseUtils.getConnection());
                }

                // Se novo Atendimento for o mesmo da Ultima Vistoria de Bem, não atualiza Chave e letra (sq) e  
                int  asset_nu_atdm_new_nb = Integer.parseInt(assetSmqt.getAsset_nu_atdm());
                int  asset_nu_atdm_ultm_nb = Integer.parseInt(asset.getAsset_nu_atdm());

                if (asset_nu_atdm_new_nb < asset_nu_atdm_ultm_nb) {
					kk_err_atd = kk_err_atd + 1; 
					if ( kk_err_atd == 0) {kk_atd_ok_prc = kk_atd_ok_prc + 1;} 
					if ( kk_err_atd > 0) {kk_atd_err_prc = kk_atd_err_prc + 1;} 
					throw new NbpNotFoundException("ER - Reprocessamento do Bp '" + asset_nu + "' com nr. de atendimento: "+asset_nu_atdm_new_nb +" inferior ao último: "+asset_nu_atdm_ultm_nb+" já cadastrado !");
                	//continue;
                } else
                // if (asset_nu_atdm_new.equals(asset_nu_atdm_ultm)) {} else {
                if (asset_nu_atdm_new_nb == asset_nu_atdm_ultm_nb) {
                	
                } else {
                	//Se Nova Vistoria não estiver na tabela de Asset, carrega ela e inicializa o sq alfa com "branco"
                	if (asset_cd_cfinvty_ultm  == null ) { asset_cd_cfinvty_ultm = ""; }
                	if (! asset_cd_cfinvty_ultm.contains(asset_cd_cfinvty_new)) {
                		asset.setAsset_cd_cfinvty(asset_cd_cfinvty_new);
                		letranova = "";
                	}
                	asset.setAsset_id(asset_nu +"-"+assetSmqt.getAsset_cd_hierarquico()+"-"+asset_cd_cfinvty_new+letranova); //  asset_cd_cfinvty informado pelo Bira 
                	asset.setAsset_cd_hierarquico(assetSmqt.getAsset_cd_hierarquico()); //  
                	asset_id = asset_nu +"-"+assetSmqt.getAsset_cd_hierarquico()+"-"+asset_cd_cfinvty_new+letranova;
                }

                // Arualiza Ativo Fixo com a [Ultima Vistoria do Bem, obitida do asset_id da Ultima Vistoria do Bem
                int startx = asset_id.lastIndexOf("-") - 2;  
                int endx = asset_id.length();                
                atvfx_cd_invty_ultm = asset_id.substring(startx, endx); 
                try {
                    String sqlup = "update IXAtivoFixo set atvfx_cd_invty_ultm = ?  where atvfx_cd = ?";
        			PreparedStatement ps_atvfx = concover.prepareStatement(sqlup);
        	        ps_atvfx.setString(1, atvfx_cd_invty_ultm);
        	        ps_atvfx.setString(2, asset_nu);
        	        ps_atvfx.executeUpdate();
        	        ps_atvfx.close();
                } catch (Exception e) {
                    //String message = e.getMessage();
                	iLog.logAtdmError(e.getMessage(), asset_nu, "");
                } finally {
                }

                //asset.setAsset_cd_cfinvty(assetSmqt.getAsset_cd_cfinvty()); // Verificar
                //String zzz = atvfx_cd_invty_ultm;
                //String vvv = "";
                //zzz = zzz.substring(zzz.length() - 1,zzz.length());
                //if (zzz.indexOf("abcdefghijklmnopqrstuvzw") >= 0 ) {
                //    vvv = atvfx_cd_invty_ultm.substring(0,atvfx_cd_invty_ultm.length() - 1);
                //    asset.setAsset_cd_cfinvty(vvv); // Verificar
                //} else {
                //    asset.setAsset_cd_cfinvty(atvfx_cd_invty_ultm); // Verificar
                //}

                asset.setAsset_cd_cfinvty(asset_cd_cfinvty_new); // Verificar
                
                // Carregando Identificadores de Atendimento
                asset.setAsset_id_atdm(assetSmqt.getAsset_id_atdm());
                asset.setAsset_nu_atdm(assetSmqt.getAsset_nu_atdm());

                // Carrega detalhes da Nova Vistoria do Bem                   				
				asset.setAsset_cd_perito(assetSmqt.getAsset_cd_perito());
				asset.setAsset_cd_auxiliar("");
				asset.setAsset_dt_vistoria(assetSmqt.getAsset_dt_vistoria());
				asset.setAsset_nu_doc_inspecao("");

                asset.setAsset_cd_ponto_atdm(assetSmqt.getAsset_cd_ponto_atdm());
                asset.setAsset_cd_stat_atdm(assetSmqt.getAsset_cd_stat_atdm());
                asset.setAsset_cd_tipo_vsta(assetSmqt.getAsset_cd_tipo_vsta());
                asset.setAsset_cd_sist_orig(assetSmqt.getAsset_cd_sist_orig());

				// Carrega Lat Lon
                
                asset.setAsset_vl_ltde(assetSmqt.getAsset_vl_ltde());
                asset.setAsset_vl_lgtd(assetSmqt.getAsset_vl_lgtd());
				// Carrega Lat Lon Nas Tabelas Gwo
               
                Double latitude = Double.parseDouble(asset.getAsset_vl_ltde());
				Double longitude = Double.parseDouble(asset.getAsset_vl_lgtd());

				//String acx = asset.getAsset_ns_vlaux();
				//if (acx == null) { acx = "";}  
				//if (acx.contains("AC")  && asset_nu_atdm_new_nb == asset_nu_atdm_ultm_nb )  {
				//	kk_ok_atd = kk_ok_atd + 1; // Count OKs
				//	iLog.logAtdmOk("Ok - Alerta: Tipo de bp '" + tp_cfasttp + "' inexistente para visualização GEO!", bp, nat);
					//if(latitude == null || longitude == null) {} else {
                	//	saveGeo(asset.getAsset_nu(), asset.getAsset_nu_atdm(), asset.getAsset_tp_cfasttp(), longitude, latitude);
                    //	asset.setAsset_ns_vlaux(" "); // A Classificar
                	//	asset.setGeo_vx("1");   
                	//}
                //}

                if (asset_nu_atdm_new_nb == asset_nu_atdm_ultm_nb) {} else {
                	if(latitude == null || longitude == null) {} else {
                		saveGeo(asset.getAsset_nu(), asset.getAsset_nu_atdm(), asset.getAsset_tp_cfasttp(), longitude, latitude);
                		asset.setGeo_vx("1");   
                	}
                }
                	
				asset.setAsset_tp_acao(assetSmqt.getAsset_tp_acao());  
				asset.setAsset_cd_area_resp(assetSmqt.getAsset_cd_area_resp());  
				asset.setAsset_cd_ccusto(assetSmqt.getAsset_cd_ccusto());  
				asset.setAsset_cd_area_resp(assetSmqt.getAsset_cd_area_resp());  
				asset.setAsset_tp_cobertura(assetSmqt.getAsset_tp_cobertura());  
				asset.setAsset_in_luz_cfgenyn(assetSmqt.getAsset_in_luz_cfgenyn());  
				asset.setAsset_in_telefonia(assetSmqt.getAsset_in_telefonia());  
				asset.setAsset_in_agua_cfgenyn(assetSmqt.getAsset_in_agua_cfgenyn());  
				asset.setAsset_tp_estrutura(assetSmqt.getAsset_tp_estrutura());  
				asset.setAsset_cd_zona_cflczon(assetSmqt.getAsset_cd_zona_cflczon());  
				asset.setAsset_in_placa_nbp(assetSmqt.getAsset_in_placa_nbp());  
				asset.setAsset_nm_patio_ferroviario(assetSmqt.getAsset_nm_patio_ferroviario());  
				asset.setAsset_ob(assetSmqt.getAsset_ob());  
				asset.setAsset_ob_patio(assetSmqt.getAsset_ob_patio());  
				asset.setAsset_tp_revest_int_parede(assetSmqt.getAsset_tp_revest_int_parede());  
				asset.setAsset_tp_revest_int_piso(assetSmqt.getAsset_tp_revest_int_piso());  
				asset.setAsset_tp_porta(assetSmqt.getAsset_tp_porta());  
				asset.setAsset_tp_janela(assetSmqt.getAsset_tp_janela());  
				asset.setAsset_km_ini(assetSmqt.getAsset_km_ini());  
				asset.setAsset_st_cfsitbm(assetSmqt.getAsset_st_cfsitbm());  
				asset.setAsset_tp_propriedade(assetSmqt.getAsset_tp_propriedade());  
				asset.setAsset_cd_trecho(assetSmqt.getAsset_cd_trecho());  
				asset.setAsset_ds(assetSmqt.getAsset_ds());  

				asset.setAsset_tp_propriedade(assetSmqt.getAsset_tp_propriedade());  

				// Atualiza Contador de Atedimentos sem e com Erros no Processamento,
				// se houver erros no Atendimento (kk_err_atd)  
	    		kk_err_atd_map.put(id_atdmx, kk_err_atd);  
	    		kk_ok_atd_map.put(id_atdmx, kk_ok_atd);  

	    		kk_err_atd = kk_err_atd_map.get(id_atdmx);
	    		kk_ok_atd = kk_ok_atd_map.get(id_atdmx);

	    		int kkkkx = kkk;
				if ( kk_err_atd == 0) {kk_atd_ok_prc = kk_atd_ok_prc + 1;} 
				if ( kk_err_atd > 0) {kk_atd_err_prc = kk_atd_err_prc + 1;} 

                // Atualiza ************ dados de uma Vistoria do Ben
				if(asset != null) {
                    // Se Asset já existir  remove e insere. Se não existir apenas Insere   
					//List<? extends DataObject> assetsFound = asset.find(DatabaseUtils.getConnection(), "asset_id", asset.getAsset_id());
					List<? extends DataObject> assetsFound = asset.find(concover, "asset_id", asset.getAsset_id());
					if (assetsFound != null && !assetsFound.isEmpty()) {
						asset.delete(concover);
					}
					//asset.save(DatabaseUtils.getConnection()); 
					asset.save(concover);
					assetIdAtdmList.add(asset.getAsset_id_atdm()+"-"+asset.getAsset_id());  // Registra Liata de Asstes Gravados
					assetNewMap.put(asset.getAsset_id_atdm(),asset);
					//System.out.println("  asset_nu_atdm: "+asset_nu_atdm_new+" kkk: "+kkk.toString());
				}

				// Exclui imagens de um Bem para inseri-los novamenete
				try {
                    PreparedStatement ps_file = concover.prepareStatement("delete from wbrl_obimg where obimg_id = ? ");
			        ps_file.setString(1, asset.getAsset_id());
			        ResultSet rs_file = ps_file.executeQuery();
			        rs_file.close();
			        ps_file.close();
				} catch ( Exception ex ) {
			    } finally {   }

			    //concover.close();   
		    	DatabaseUtils.releaseConnection(concover);
        	} catch (SQLException e) {
        		iLog.logAtdmError(e.getMessage(), asset_nu, assetSmqt.getAsset_nu_atdm()) ;
			//} catch (IOException e) {
			//	iLog.logAtdmError(e.getMessage(), asset_nu);
			} catch (NbpNotFoundException e) {   // -------------------------

				// Arualiza Tabela de Header com status de lido
	            try {
	            	String sqlup_ora = "update    "+appsx+"MRS_FA_ATDM_SQ_HEADERS set LAST_UPDATE_DATE=SYSDATE, SIST_DEST_LIDO = ?    where NU_ATDM = ?";
	            	PreparedStatement ps_header = oracleConnectionH.prepareStatement(sqlup_ora);
	                String status = "E";
	            		ps_header.setString(1, status);
                        Integer atd = Integer.parseInt(asset_nu_atdm_new); 
                        String atdx = atd.toString();
                        ps_header.setString(2, atdx);
	            		ps_header.executeUpdate();
	            		ps_header.close();
	            		kkkLidos = kkkLidos + 1;
	            		DatabaseUtils.releaseOracleConnection(oracleConnectionH);
	            		//System.out.println("XXX>>>>> Qtd de Atualizaçoes do Header: "+kkkLidos.toString());
	            } catch (Exception ex) {
	                //String message = e.getMessage();
	            	iLog.logAtdmError(ex.getMessage(), asset_nu, asset.getAsset_nu_atdm());
	            } finally {
	            }
				
				iLog.logAtdmError(e.getMessage(), asset_nu, assetSmqt.getAsset_nu_atdm());
				//iLog.setAtdmLogType(AtdmLogType.BN);
			} finally {
				if (kk_ok_atd == 0) {
					iLog.logAtdmOk("Ok  ", asset_nu, assetSmqt.getAsset_nu_atdm());
				}
			}
			//iLog.closeAtdm();  llllllllllllllllllllllllllllllllllllllllllllllllll
        }    
        

        // Salva Imagens dos Bens Omseridps / Atalizados
    	ListIterator assetIdAtdmList_itr = assetIdAtdmList.listIterator();   kkk = 0; 
        while (assetIdAtdmList_itr.hasNext()  ) {
        	String zzz  = ((String) (assetIdAtdmList_itr.next()));
        	id_atdmx = zzz.substring(0,zzz.indexOf("-")); 
			kkk = kkk + 1; 
			System.out.println("XXX>>>>> Carrega e Gera Imagens - asset_id_atdm: "+id_atdmx+" kkk: "+kkk.toString());
        	String asset_idx = zzz.substring(zzz.indexOf("-")+1,zzz.length());   
            asset = assetNewMap.get(id_atdmx);
            try {
        		Connection conImages =  DatabaseUtils.getConnection();  

        		String SqlVist = "SELECT CAMPO_FORM, VL_RSPT FROM "+appsx+"MRS_FA_ATDM_SQ_RSPT WHERE VL_RSPT IS NOT NULL AND ID_ATDM = ? and CAMPO_FORM = 'Fotografia'";
        		//String SqlVist = "SELECT CAMPO_FORM, VL_RSPT FROM apps.MRS_FA_ATDM_SQ_RSPT WHERE VL_RSPT IS NOT NULL AND ID_ATDM = ? and CAMPO_FORM = 'Fotografia'";
        		Connection oracleConnection_i = DatabaseUtils.getOracleConnection();
        		PreparedStatement ps_filev = oracleConnection_i.prepareStatement(SqlVist);
    			ps_filev.setString(1, id_atdmx);
    			ResultSet rs_filev = ps_filev.executeQuery();
    			while (rs_filev.next()) {
    				valorx = clobToString(rs_filev.getClob("VL_RSPT")).trim(); // Titulo Fixo, usado para De/Para Ref Campo de Asset
    			
    				
	            	String sispatImagesPath = sispatImagesRoot.getAbsolutePath() + File.separator + SISPAT_IMAGES_FOLDERNAME + "-" + asset.getAsset_cd_cfinvty() + File.separator;
	            	
	            	File sispatImagesFolder = new File(sispatImagesPath);
	            	if(!sispatImagesFolder.exists()) {
	            		sispatImagesFolder.mkdirs();
	            	}
	
	            	Integer nextObimg_sq = nextObimg_sq(asset_idx);
	            	
					//String filename = asset.getAsset_id() + "_" + nextObimg_sq + ".jpg"; 
					String filename = asset_idx + "_" + nextObimg_sq + ".jpg"; 
					
					stringToImage(valorx, new File(sispatImagesPath + filename));
	            	Obimg obimg = new Obimg();
	            	obimg.setObimg_id(asset_idx);
	            	
					//List<? extends DataObject> obimgsFound = obimg.find(DatabaseUtils.getConnection(), "obimg_id", asset.getAsset_id());
	            	//List<? extends DataObject> obimgsFound = obimg.find(conunages, "obimg_id", asset.getAsset_id());
	            	List<? extends DataObject> obimgsFound = obimg.find(conImages, "obimg_id", asset_idx);
	            	
	            	//if (obimgsFound != null && !obimgsFound.isEmpty()) {
					//obimg.delete(DatabaseUtils.getConnection());
					//obimg.delete(conline);
					//}
	            	
	            	asset.setImag_vx("1");
	            	obimg.setObimg_nm_file(filename);
					obimg.setObimg_sq(nextObimg_sq);
	            	obimg.setObimg_ds("incluido via SmartQuestion");
	            	obimg.setObimg_ct(asset.getAsset_tp_cfasttp());
	            	obimg.setObimg_vc("0");
	            	obimg.setTabs_vf("000000000000000000000000000000");
	            	obimg.setRecd_ts(Calendar.getInstance().getTime());
					//obimg.save(DatabaseUtils.getConnection()); 
					obimg.save(conImages); 
					asset.update(conImages);
    			}
    			rs_filev.close();
    			ps_filev.close();
    	    	//oracleConnection_i.close();
        		DatabaseUtils.releaseOracleConnection(oracleConnection_i);
        		DatabaseUtils.releaseConnection(conImages);
        	} catch (Exception e) {
                String message = e.getMessage();
    		} finally {
    		}
    		//DatabaseUtils.releaseConnection(concover);
        }        
		iLog.closeAtdm();

		if(isEmpty) {
			iLog.message("Nenhum Atendimento pronto para importar! ");
		}
		iLog.end(DateIni, DateEnd,  kk_atd_ok_prc, kk_atd_err_prc);

        
    } // Mthod End

	private void saveGeo(String bp, String nat, String tp_cfasttp, Double longitude, Double latitude) throws SQLException {
		List<String> tpGeoExistentes = Arrays.asList("BU","DP", "ED", "LP", "PI", "PN", "PS", "PT", "TL", "TP", "TU");
		
		if(tpGeoExistentes.contains(tp_cfasttp)) {
			String bpparcela = bp + "000";
    		Connection congeo =  DatabaseUtils.getConnection();

            /* Verifica se Bpparcela ja existe na base */
            String sqlsel = "SELECT Bpparcela FROM MRS_GEO WHERE Bpparcela=? AND TIPO=? AND ORIGEM='smartquestion'";
            PreparedStatement pstmtsel = congeo.prepareStatement(sqlsel);
            pstmtsel.setString(1, bpparcela);
            pstmtsel.setString(2, tp_cfasttp);
            ResultSet rs_pstmtsel = pstmtsel.executeQuery();
            
            /* Se o BP existir então atualiza com a nova coordenada se a mesma estiver a uma distância de 150 metros da coordenada cadastrada, caso contrário não atualizar */
            if (rs_pstmtsel.next()) {
            	Statement stmt = congeo.createStatement();

            	String sql = "select ID from MRS_GEO where bpparcela="+bpparcela+" and tipo='"+tp_cfasttp+"' and origem='smartquestion' and geography::Point(GEOMETRY.STX,GEOMETRY.STY, 4618).STDistance(geography::Point(" + latitude + "," + longitude + ", 4618)) > 150";
            	ResultSet rs = stmt.executeQuery(sql);
            	if(rs.next()) {
            		String update = "UPDATE MRS_GEO SET GEOMETRY = geometry::Point(" + latitude + ", " + longitude + ", 4618) WHERE ID=" + rs.getInt(1);
            		stmt.executeUpdate(update);
            		iLog.logAtdmOk("Ok - GEO atualizado com sucesso!", bp, nat);
            	}
            	
            	stmt.close();
            } else { /* Será inserida caso não exista */
            	String sql = "INSERT INTO MRS_GEO (BPPARCELA, GEOMETRY, TIPO, ORIGEM) VALUES (" + bpparcela + ", geometry::Point(" + latitude + ", " + longitude + ", 4618), '"+tp_cfasttp+"', 'smartquestion')";
            	Statement stmt = congeo.createStatement();
            	stmt.execute(sql);
            	stmt.close();
            	iLog.logAtdmOk("Ok - GEO inserido com sucesso!", bp, nat);
            }
            pstmtsel.close();
            DatabaseUtils.releaseConnection(congeo);
            // Fim 			

		} else {
			kk_ok_atd = kk_ok_atd + 1; // Count OKs
			iLog.logAtdmOk("Ok - Alerta: Tipo de bp '" + tp_cfasttp + "' inexistente para visualização GEO!", bp, nat);
		}
	}
    /**
	 * Carregando Titulo Var/Fixo em Hash Map (Oracle)
	 * @return 
	 * @throws SQLException 
	 */
	private Map<String, String> loadTitles() throws SQLException {
		Map<String,String> ttvarfixo = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		
		Statement stmt = DatabaseUtils.getOracleConnection().createStatement();

		ResultSet rs = stmt.executeQuery("Select INTF_SIST_MRS, INTF_SIST_EXTN FROM "+appsx+"MRS_IA_INTF_SIST");  
		//ResultSet rs = stmt.executeQuery("Select INTF_SIST_MRS, INTF_SIST_EXTN FROM MRS_IA_INTF_SIST"); 

		while (rs.next()) {
			String ttvar = rs.getString("INTF_SIST_EXTN"); // Titulo Variavel
			String ttfixo = rs.getString("INTF_SIST_MRS"); // Titulo Fixo para Identificação do Campo da Tabela Asset
			ttvarfixo.put(ttvar, ttfixo);
		}
		
		return ttvarfixo;
	}
	
	/**
	 * Carregando Codf SQL De/Para (SQL SERVER)
	 * @return 
	 * @throws SQLException 
	 */
	private Map<String, String> loadCodf() throws SQLException {
		Map<String, String> codfSqDePara = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
		Connection conCodf = DatabaseUtils.getConnection();

		Statement stmt = conCodf.createStatement();
		ResultSet rs = stmt.executeQuery("Select codf_tp, codf_id, codf_supid from Codf where codf_supid like '%MRSSQ-%'");
		while (rs.next()) {
			String codf_tp = rs.getString("codf_tp");
			String codf_id = rs.getString("codf_id");
			String codf_supid = rs.getString("codf_supid");
			//int start = codf_supid.indexOf("<") + 1;
			//int end = codf_supid.indexOf(">");
			int start = codf_supid.indexOf("SQ-") + 3;
			int end = codf_supid.length();
            String codf_id_mrs = codf_supid.substring(start, end);
			
			if (start < 0 || end < 0) {
    			System.out.println("codf_tp: "+codf_tp+" codf_id: "+codf_id+" codf_supid: "+codf_supid);
            } else {
            	codfSqDePara.put(codf_tp + "-" + codf_id_mrs, codf_id);
            }
        }
		DatabaseUtils.releaseConnection(conCodf);
		return codfSqDePara;
	}
	
	private Integer nextObimg_sq(String asset_id) throws SQLException {
		Integer lastsq = 0;
		Connection connection = DatabaseUtils.getConnection();
		String sql = "SELECT MAX(OBIMG_SQ) FROM WBRL_OBIMG WHERE OBIMG_ID=?";
		PreparedStatement pstmt3 = connection.prepareStatement(sql);
		pstmt3.setString(1, asset_id);
		ResultSet rs = pstmt3.executeQuery();
		if (rs.next()) {
			lastsq = rs.getInt(1);
		}
		DatabaseUtils.releaseConnection(connection);
		return lastsq + 1;
	}

	private String clobToString(Clob clob) throws SQLException, IOException {
		StringBuilder sb = new StringBuilder();
		BufferedReader br = new BufferedReader(clob.getCharacterStream());
		String line;
		while (null != (line = br.readLine())) {
			sb.append(line);
		}
		br.close();
		
		return sb.toString();
	}

	private void stringToImage(String str, File file) throws SQLException, IOException {
        
		byte[] data = DatatypeConverter.parseBase64Binary(str);
        
        BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));
        if(image != null) {
        	ImageIO.write(image, file.getName().substring(file.getName().lastIndexOf(".")+1), file);
        } else {
			throw new SQLException("Não foi possível gerar a imagem '" + file.getAbsolutePath() + "'");
        }
        
	}
	
	/**
	 * Carregando o ASSET com o INVTY mais recente (SQL Server)
	 * 
	 * @param asset_nu
	 * @throws SQLException 
	 */
	private Asset loadLastSurvey(String asset_nu, String parcela) throws SQLException  {
		Connection connection = DatabaseUtils.getConnection();
		//String sql = "SELECT TOP 1 ASSET_ID FROM WBRL_ASSET WHERE ASSET_NU=? ORDER BY ASSET_CD_CFINVTY DESC";
		//String sql = "SELECT MAX ASSET_ID FROM WBRL_ASSET WHERE ASSET_NU=? --ORDER BY ASSET_ID";
		//String sql = "SELECT MAX ASSET_ID FROM WBRL_ASSET WHERE ASSET_NU=? ";
		//String sql = "SELECT MAX(ASSET_ID) FROM WBRL_ASSET WHERE ASSET_NU=? ";  
		String sql = "SELECT MAX(ASSET_ID) FROM WBRL_ASSET WHERE ASSET_NU=? AND ASSET_CD_HIERARQUICO = ? ";  
		
		PreparedStatement pstmtx = connection.prepareStatement(sql);
		pstmtx.setString(1, asset_nu);
		pstmtx.setString(2, parcela);
		
		ResultSet rsls = pstmtx.executeQuery();
		String assetId = null; //String assetTp = null;
		String assetTp = null; //String assetTp = null;
		if (rsls.next()) {
			assetId = rsls.getString(1);
			//assetTp = rs.getString("asset_tp_cfasttp");
		}

		Asset asset = new Asset(assetId);
		if(assetId != null) {
			asset.load(connection);  // carga de asset_tp_cfasttp esta implicita 
		} else {
        	asset.setAsset_tp_cfasttp("AC"); // A Classificar
        	asset.setAsset_ns_vlaux("AC"); // A Classificar
		}
		asset.setAsset_nu(asset_nu);
        String xxaaa =  asset.getAsset_tp_cfasttp(); 
		String xaaaxaaa =  asset.getAsset_id(); 

		DatabaseUtils.releaseConnection(connection);
        return asset;
	}

	public static void setDeltaMinutesParam(Integer deltaMinutesParam) {
		IntegrationJob.deltaMinutesParam = deltaMinutesParam;
	}

	public static void setSispatImagesRoot(File sispatImagesRoot) {
		IntegrationJob.sispatImagesRoot = sispatImagesRoot;
	}

    public BigDecimal convertDecimal(String value) {
        int pos = value.indexOf(",") + 1;
        if (pos == value.length() ) {
            value = value + "0";
        }
        String ret;
        if (value.equals("")) {
            value = null;
            return null;
        }
        Locale locale = new Locale("pt", "BR");
        if(locale.equals(new Locale("pt", "BR"))) {
        	String str1 = value.replace(".", "*");
            String str2 = str1.replace(",", "&");

            String str3 = str2.replace("*", ",");
            str3 = str2.replace("-", ",");
            str3 = str2.replace("&", ".");
            //ret = str3.replace("&", ".");
            ret = str3;
        } else {
            String str1 = value.replace(",", "*");
            String str2 = str1.replace(".", "&");

            String str3 = str2.replace("*", ",");
            str3 = str2.replace("-", ",");
            str3 = str2.replace("&", ".");
            //ret = str3.replace("&", ".");
            ret = str3;
        }
        ret = ret.replace(",", ".");
        ret = ret.replace("-", ".");
        return (BigDecimal) ConvertUtils.lookup(BigDecimal.class).convert(BigDecimal.class, ret);
    }

}	
	
	
